-- Optimized Taxi Boss Script
-- Improved performance, smoother loops, cleaner code
-- UI designed for premium feel: Organized tabs, labels, and intuitive controls
-- Compatible with all executors (uses standard loadstring UI lib)
-- Removed Auto Money [auto rejoin] button
-- Anti-AFK and Anti-Staff enabled by default
-- Changed theme color from green to red (assuming UI lib supports theme; added custom color override if possible)
-- Added FPS Boost function: Reduces graphics quality, removes power-consuming elements, optimizes for low ping/FPS improvement
-- Removed: Donut God Mode, Auto Customers [Beta], Auto Destroy Pumpkins
-- Added: Buy Specific Vehicles button to purchase Catrelac Limo, Testa Roadster, Bertus G, Flamma Inzo in one go

local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)

-- Anti-Staff Kick
local function checkStaff(player)
    if player:GetRankInGroup(11987919) > 149 then
        game.Players.LocalPlayer:Kick("Auto Kicked Due to Staff Member " .. player.Name .. " joined your game")
    else
        warn(player.Name, "just joined the game")
    end
end

game:GetService("Players").PlayerAdded:Connect(checkStaff)

task.spawn(function()
    warn("Anti Staff is now running")
    while true do
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player:GetRankInGroup(11987919) > 149 then
                game.Players.LocalPlayer:Kick("Auto Kicked Due to Staff Member " .. player.Name .. " is in your game")
            end
        end
        task.wait(5)
    end
end)

-- Load Premium UI Library (optimized load)
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Marco8642/science/main/ui%20libs2", true))()

-- Attempt to change UI theme to red (customize if lib supports; placeholder for color override)
if library.SetTheme then
    library:SetTheme({
        MainColor = Color3.fromRGB(255, 0, 0),  -- Red main color
        AccentColor = Color3.fromRGB(200, 0, 0),  -- Darker red accent
        -- Add more if lib has options
    })
end

-- Main Window: Auto Features
local mainWindow = library:CreateWindow({
    text = "Taxi Boss - Auto Features"
})

mainWindow:AddLabel("Enable/Disable Automated Farms")
mainWindow:AddToggle("Auto Collect Parts", function(state)
    getfenv().partcollector = state
    while getfenv().partcollector do
        task.wait(0.2)  -- Smoother loop
        for _, location in ipairs(workspace.ItemSpawnLocations:GetChildren()) do
            if not getfenv().partcollector then break end
            local timer = tick()
            repeat task.wait(0.1)
                game.Players.LocalPlayer.Character:PivotTo(location.CFrame + Vector3.new(0, 251, 0))
            until tick() - timer >= 1.5  -- Optimized timeout
            for _, v in ipairs(workspace.ItemSpawnLocations:GetDescendants()) do
                if v.Name == "TouchInterest" and v:IsA("TouchTransmitter") then
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 0)
                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v.Parent, 1)
                end
            end
        end
    end
end)

mainWindow:AddToggle("Auto Money", function(state)
    getfenv().test2 = state
    pcall(function()
        local activeQuests = game:GetService("Players").LocalPlayer.ActiveQuests
        local contract = activeQuests:FindFirstChildOfClass("StringValue")
        if contract then
            game:GetService("ReplicatedStorage").Quests.Contracts.CancelContract:InvokeServer(contract.Name)
        end
    end)
    while getfenv().test2 do
        task.wait(0.1)
        local activeQuests = game:GetService("Players").LocalPlayer.ActiveQuests
        if not activeQuests:FindFirstChild("contractBuildMaterial") then
            game:GetService("ReplicatedStorage").Quests.Contracts.StartContract:InvokeServer("contractBuildMaterial")
            repeat task.wait(0.05) until activeQuests:FindFirstChild("contractBuildMaterial")
        end
        repeat task.wait(0.05)
            task.spawn(function()
                game:GetService("ReplicatedStorage").Quests.DeliveryComplete:InvokeServer("contractMaterial")
            end)
        until activeQuests.contractBuildMaterial.Value == "!pw5pi3ps2" or not getfenv().test2
        game:GetService("ReplicatedStorage").Quests.Contracts.CompleteContract:InvokeServer()
    end
end)

mainWindow:AddToggle("Auto Trophies", function(state)
    getfenv().Trophies = state
    game:GetService("ReplicatedStorage").Race.LeaveRace:InvokeServer()
    getfenv().showui = getfenv().Trophies
    task.spawn(function()
        local moneyGui = game.Players.LocalPlayer.PlayerGui.ScreenGui.Money
        if not getfenv().showui and moneyGui:FindFirstChild("Rep") then
            moneyGui.Rep:Destroy()
        else
            while getfenv().showui do
                task.wait(0.2)
                if not moneyGui:FindFirstChild("Rep") then
                    local oh = moneyGui.CashLabel:Clone()
                    oh.Name = "Rep"
                    oh.Parent = moneyGui
                    oh.Position = UDim2.new(3, 0, 0, 0)
                else
                    moneyGui.Rep.Text = "Rep: " .. tostring(game.Players.LocalPlayer.variables.rep.Value)
                end
            end
        end
    end)
    while getfenv().Trophies do
        task.wait(0.1)
        pcall(function()
            local hum = game.Players.LocalPlayer.Character.Humanoid
            if hum.Sit then
                if game.Players.LocalPlayer.variables.race.Value == "none" then
                    game:GetService("ReplicatedStorage").Race.TimeTrial:InvokeServer("circuit", 5)
                else
                    for _, b in ipairs(workspace.Vehicles:GetDescendants()) do
                        if b.Name == "Player" and b.Value == game.Players.LocalPlayer then
                            local car = b.Parent.Parent
                            for _, v in ipairs(workspace.Races.circuit.detects:GetChildren()) do
                                if v:IsA("Part") and v:FindFirstChild("TouchInterest") then
                                    v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                                    firetouchinterest(car.PrimaryPart, v, 0)
                                    firetouchinterest(car.PrimaryPart, v, 1)
                                end
                            end
                            local finish = workspace.Races.circuit.timeTrial:FindFirstChildOfClass("IntValue").finish
                            finish.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                            firetouchinterest(car.PrimaryPart, finish, 0)
                            firetouchinterest(car.PrimaryPart, finish, 1)
                        end
                    end
                end
            else
                game:GetService("ReplicatedStorage").Vehicles.GetNearestSpot:InvokeServer(game.Players.LocalPlayer.variables.carId.Value)
                task.wait(0.3)
                game:GetService("ReplicatedStorage").Vehicles.EnterVehicleEvent:InvokeServer()
            end
        end)
    end
end)

mainWindow:AddToggle("Auto TimeTrial Medals", function(state)
    getfenv().medals = state
    game:GetService("ReplicatedStorage").Race.LeaveRace:InvokeServer()
    while getfenv().medals do
        task.wait(0.1)
        local hum = game.Players.LocalPlayer.Character.Humanoid
        if hum.Sit then
            for round = 1, 3 do
                for _, races in ipairs(workspace.Races:GetChildren()) do
                    if races:IsA("Folder") and getfenv().medals then
                        game:GetService("ReplicatedStorage").Race.TimeTrial:InvokeServer(races.Name, round)
                        task.wait(0.2)
                        if game.Players.LocalPlayer.variables.race.Value == "none" then
                            game:GetService("ReplicatedStorage").Race.TimeTrial:InvokeServer(races.Name, round)
                        else
                            for _, b in ipairs(workspace.Vehicles:GetDescendants()) do
                                if b.Name == "Player" and b.Value == game.Players.LocalPlayer then
                                    local car = b.Parent.Parent
                                    repeat task.wait(0.05)
                                        for _, v in ipairs(workspace.Races[races.Name].detects:GetChildren()) do
                                            if v:IsA("Part") and v:FindFirstChild("TouchInterest") then
                                                v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                                                firetouchinterest(car.PrimaryPart, v, 0)
                                                firetouchinterest(car.PrimaryPart, v, 1)
                                            end
                                        end
                                    until workspace.Races[races.Name].timeTrial:FindFirstChildOfClass("IntValue") or not getfenv().medals
                                    repeat task.wait(0.05)
                                        for _, v in ipairs(workspace.Races[races.Name].detects:GetChildren()) do
                                            if v:IsA("Part") and v:FindFirstChild("TouchInterest") then
                                                v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                                                firetouchinterest(car.PrimaryPart, v, 0)
                                                firetouchinterest(car.PrimaryPart, v, 1)
                                            end
                                        end
                                        pcall(function()
                                            local finish = workspace.Races[races.Name].timeTrial:FindFirstChildOfClass("IntValue").finish
                                            finish.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                                            firetouchinterest(car.PrimaryPart, finish, 0)
                                            firetouchinterest(car.PrimaryPart, finish, 1)
                                        end)
                                    until game.Players.LocalPlayer.variables.race.Value == "none" or not getfenv().medals
                                end
                            end
                        end
                    end
                end
            end
        else
            game:GetService("ReplicatedStorage").Vehicles.GetNearestSpot:InvokeServer(game.Players.LocalPlayer.variables.carId.Value)
            task.wait(0.3)
            game:GetService("ReplicatedStorage").Vehicles.EnterVehicleEvent:InvokeServer()
        end
    end
end)

mainWindow:AddToggle("Auto Upgrade Office", function(state)
    getfenv().ofs = state
    while getfenv().ofs do
        task.wait(0.2)
        if not game.Players.LocalPlayer:FindFirstChild("Office") then
            game:GetService("ReplicatedStorage").Company.StartOffice:InvokeServer()
            task.wait(0.1)
        end
        if game.Players.LocalPlayer.Office:GetAttribute("level") < 16 then
            game:GetService("ReplicatedStorage").Company.SkipOfficeQuest:InvokeServer()
            game:GetService("ReplicatedStorage").Company.UpgradeOffice:InvokeServer()
        end
    end
end)

-- Teleports Window: Organized into dropdowns for premium feel
local teleportsWindow = library:CreateWindow({
    text = "Taxi Boss - Teleports"
})

teleportsWindow:AddLabel("Select Location to Teleport")
teleportsWindow:AddLabel("Group 1")
teleportsWindow:AddDropdown({"Select", "Beechwood", "Beechwood Beach", "Boss Airport", "Bridgeview", "Cedar Side", "Central Bank", "Central City", "City Park", "Coconut Park", "Country Club", "Da Hills", "Doge Harbor"}, function(state)
    if state == "Select" then return end
    local locations = {
        Beechwood = game.ReplicatedStorage.Places.Beechwood,
        ["Beechwood Beach"] = game.ReplicatedStorage.Places["Beechwood Beach"],
        ["Boss Airport"] = CFrame.new(-637.1304931640625, 38.99796676635742, 4325.2275390625),
        Bridgeview = CFrame.new(1354.4610595703125, 10.30431079864502, 1278.8033447265625),
        ["Cedar Side"] = game.ReplicatedStorage.Places["Cedar Side"],
        ["Central Bank"] = game.ReplicatedStorage.Places["Central Bank"],
        ["Central City"] = game.ReplicatedStorage.Places["Central City"],
        ["City Park"] = game.ReplicatedStorage.Places["City Park"],
        ["Coconut Park"] = game.ReplicatedStorage.Places["Coconut Park"],
        ["Country Club"] = game.ReplicatedStorage.Places["Country Club"],
        ["Da Hills"] = CFrame.new(2348.347412109375, 73.10881805419922, -1537.3157958984375),
        ["Doge Harbor"] = CFrame.new(3335.737548828125, 24.955890655517578, 2773.038818359375)
    }
    local targetCFrame = locations[state] or CFrame.new(0,0,0)
    if typeof(targetCFrame) == "Instance" then targetCFrame = targetCFrame.CFrame end
    local chr = game.Players.LocalPlayer.Character
    local hum = chr.Humanoid
    local offset = Vector3.new(0, hum.SeatPart and 40 or 30, 0)
    if hum.SeatPart then
        hum.SeatPart.Parent.Parent:PivotTo(targetCFrame + offset)
    else
        chr:PivotTo(targetCFrame + offset)
    end
end)

teleportsWindow:AddLabel("Group 2")
teleportsWindow:AddDropdown({"Select", "Gas Station", "Gas Station 2", "Harborview", "Hawthorn Park", "Hospital", "Industrial District", "Logistic District", "Master Hotel", "Military Base", "Noll Cliffs", "Nuclear Power Plant", "OFF ROAD Test Track"}, function(state)
    if state == "Select" then return end
    local locations = {
        ["Gas Station"] = CFrame.new(103.700256, 0, -640.599792),
        ["Gas Station 2"] = CFrame.new(930.7002563476562, 0, 643.4002075195312),
        Harborview = game.ReplicatedStorage.Places.Harborview,
        ["Hawthorn Park"] = game.ReplicatedStorage.Places["Hawthorn Park"],
        Hospital = game.ReplicatedStorage.Places.Hospital,
        ["Industrial District"] = game.ReplicatedStorage.Places["Industrial District"],
        ["Logistic District"] = CFrame.new(588.2861938476562, 53.5777473449707, 2529.95361328125),
        ["Master Hotel"] = CFrame.new(2736.1591796875, 15.864909172058105, -202.09945678710938),
        ["Military Base"] = game.ReplicatedStorage.Places["Military Base"],
        ["Noll Cliffs"] = game.ReplicatedStorage.Places["Noll Cliffs"],
        ["Nuclear Power Plant"] = game.ReplicatedStorage.Places["Nuclear Power Plant"],
        ["OFF ROAD Test Track"] = game.ReplicatedStorage.Places["OFF ROAD Test Track"]
    }
    local targetCFrame = locations[state] or CFrame.new(0,0,0)
    if typeof(targetCFrame) == "Instance" then targetCFrame = targetCFrame.CFrame end
    local chr = game.Players.LocalPlayer.Character
    local hum = chr.Humanoid
    local offset = Vector3.new(0, hum.SeatPart and 40 or 30, 0)
    if hum.SeatPart then
        hum.SeatPart.Parent.Parent:PivotTo(targetCFrame + offset)
    else
        chr:PivotTo(targetCFrame + offset)
    end
end)

teleportsWindow:AddLabel("Group 3")
teleportsWindow:AddDropdown({"Select", "Ocean Viewpoint", "Oil Refinery", "Old Town", "Popular Street", "Small Town", "St. Noll Viewpoint", "Sunny Elementary", "Sunset Grove", "Taxi Central", "high school", "mall", "the beach", "🌎 Race Club"}, function(state)
    if state == "Select" then return end
    local locations = {
        ["Ocean Viewpoint"] = game.ReplicatedStorage.Places["Ocean Viewpoint"],
        ["Oil Refinery"] = game.ReplicatedStorage.Places["Oil Refinery"],
        ["Old Town"] = game.ReplicatedStorage.Places["Old Town"],
        ["Popular Street"] = game.ReplicatedStorage.Places["Popular Street"],
        ["Small Town"] = game.ReplicatedStorage.Places["Small Town"],
        ["St. Noll Viewpoint"] = game.ReplicatedStorage.Places["St. Noll Viewpoint"],
        ["Sunny Elementary"] = game.ReplicatedStorage.Places["Sunny Elementary"],
        ["Sunset Grove"] = game.ReplicatedStorage.Places["Sunset Grove"],
        ["Taxi Central"] = game.ReplicatedStorage.Places["Taxi Central"],
        ["high school"] = game.ReplicatedStorage.Places["high school"],
        mall = game.ReplicatedStorage.Places.mall,
        ["the beach"] = game.ReplicatedStorage.Places["the beach"],
        ["🌎 Race Club"] = game.ReplicatedStorage.Places["🌎 Race Club"]
    }
    local targetCFrame = locations[state] or CFrame.new(0,0,0)
    if typeof(targetCFrame) == "Instance" then targetCFrame = targetCFrame.CFrame end
    local chr = game.Players.LocalPlayer.Character
    local hum = chr.Humanoid
    local offset = Vector3.new(0, hum.SeatPart and 40 or 30, 0)
    if hum.SeatPart then
        hum.SeatPart.Parent.Parent:PivotTo(targetCFrame + offset)
    else
        chr:PivotTo(targetCFrame + offset)
    end
end)

-- Miscellaneous Window
local miscWindow = library:CreateWindow({
    text = "Taxi Boss - Miscellaneous"
})

miscWindow:AddLabel("Vehicle Buyer")
miscWindow:AddBox("Enter Vehicle Name", function(object, focus)
    if focus then
        local carName = object.Text
        local carList = require(game.ReplicatedStorage.ModuleLists.CarList)
        for _, v in ipairs(carList) do
            if string.find(v.name:lower(), carName:lower()) then
                game.ReplicatedStorage.DataStore.PurchaseVehicle:InvokeServer(v.id)
                break
            end
        end
    end
end)

miscWindow:AddButton("Buy Specific Vehicles", function()
    local carList = require(game.ReplicatedStorage.ModuleLists.CarList)
    local carsToBuy = {"Catrelac Limo", "Testa Roadster", "Bertus G", "Flamma Inzo"}
    for _, carName in ipairs(carsToBuy) do
        for _, v in ipairs(carList) do
            if v.name == carName then
                game.ReplicatedStorage.DataStore.PurchaseVehicle:InvokeServer(v.id)
                break
            end
        end
    end
end)

miscWindow:AddButton("Unlock Taxi Radar", function()
    game.Players.LocalPlayer.variables.vip.Value = true
end)

miscWindow:AddButton("Show Players Stats", function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.F9, false, game)
    print("Players Owned Cars & Stats")
    for _, player in ipairs(game.Players:GetPlayers()) do
        print("------------------ " .. player.Name .. " Owned Cars ------------------")
        local ownedCars = {}
        for _, b in ipairs(player.Data.OwnedCars:GetChildren()) do
            if b:IsA("BoolValue") and b.Value then
                local carList = require(game.ReplicatedStorage.ModuleLists.CarList)
                for _, d in ipairs(carList) do
                    if d.id == tonumber(b.Name) then
                        table.insert(ownedCars, d.name)
                    end
                end
            end
        end
        print(table.concat(ownedCars, ", "))
        print("------------------ " .. player.Name .. " Currencies ------------------")
        print(player.variables.candy.Name .. ": " .. player.variables.candy.Value)
        print(player.variables.rep.Name .. ": " .. player.variables.rep.Value)
        print(player.Data.coconuts.Name .. ": " .. player.Data.coconuts.Value)
        print("------------------ " .. player.Name .. " Race Best Times ------------------")
        local raceTimes = player.Data.BestTimes:GetAttributes()
        for name, time in pairs(raceTimes) do
            print(name .. ": " .. time)
        end
    end
end)

miscWindow:AddButton("Reset Character", function()
    game.Players.LocalPlayer.Character:BreakJoints()
end)

miscWindow:AddButton("Remove AI Vehicles", function()
    workspace.Tracks:Destroy()
end)

miscWindow:AddButton("Remove Locked Area Barriers", function()
    workspace.AreaLocked:Destroy()
end)

-- New FPS Boost Toggle
miscWindow:AddToggle("Boost FPS (Low Graphics)", function(state)
    getfenv().fpsboost = state
    if getfenv().fpsboost then
        -- Set lowest graphics quality
        settings().Rendering.QualityLevel = 1
        UserSettings():GetService("UserGameSettings").SavedQualityLevel = Enum.SavedQualitySetting.QualityLevel1
        
        -- Disable power-consuming features
        game:GetService("Lighting").GlobalShadows = false
        game:GetService("Lighting").Brightness = 0
        game:GetService("Lighting").FogEnd = 9e9  -- Remove fog
        game:GetService("Lighting").Technology = Enum.Technology.Compatibility  -- Lowest rendering
        
        -- Remove unnecessary workspace elements
        pcall(function()
            for _, v in ipairs(workspace:GetDescendants()) do
                if v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Smoke") or v:IsA("Fire") or v:IsA("Sparkles") then
                    v:Destroy()
                elseif v:IsA("Decal") and v.Name ~= "ImportantDecal" then  -- Keep important if any
                    v:Destroy()
                elseif v:IsA("Terrain") then
                    v.Material = Enum.Material.Concrete  -- Simplest material
                    v.Decoration = false
                elseif v:IsA("Model") and string.find(v.Name:lower(), "grass") or string.find(v.Name:lower(), "foliage") then
                    v:Destroy()
                end
            end
        end)
        
        -- Optimize script performance (reduce all waits slightly if needed, but already optimized)
        warn("FPS Boost Enabled: Lowest graphics, removed effects.")
    else
        -- Revert if possible (but for simplicity, we don't revert as it's a boost)
        warn("FPS Boost Disabled.")
    end
end)
